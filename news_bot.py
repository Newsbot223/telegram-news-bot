# -*- coding: utf-8 -*-

import os
os.environ["PYTHONIOENCODING"] = "utf-8"
import feedparser
import time
import requests
from datetime import datetime, timezone, timedelta
import openai
import difflib
import sys
import io

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
client = openai.OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
    base_url="https://openrouter.ai/api/v1"
)

TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# === RSS –ò–°–¢–û–ß–ù–ò–ö–ò ===
rss_feeds = [
    "https://www.tagesschau.de/xml/rss2",
    "https://www.zdf.de/rss/zdfheutea.xml",
    "https://www.spiegel.de/international/index.rss",
    "https://www.sueddeutsche.de/news/rss"
]

# === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô ===
def fix_formatting(text):
    lines = text.strip().split("\n")
    clean_lines = []

    for line in lines:
        line = line.strip()
        if not line:
            continue

        # –£–¥–∞–ª—è–µ–º –∂–∏—Ä–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ –∞–±–∑–∞—Ü–µ–≤
        line = re.sub(r"\*{2,}|_{2,}", "", line)
        line = re.sub(r"<[^>]+>", "", line)  # —É–±–∏—Ä–∞–µ–º html-—Ç–µ–≥–∏

        clean_lines.append(line)

    if not clean_lines:
        return text

    # –ü–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –∂–∏—Ä–Ω—ã–π
    clean_lines[0] = f"*{clean_lines[0].strip('*').strip()}*"

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–ª–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å > –∏–ª–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö)
    for i in range(1, len(clean_lines)):
        if clean_lines[i].startswith('"') or clean_lines[i].startswith("‚Äú"):
            clean_lines[i] = clean_lines[i].strip('\'"')
        if clean_lines[i].startswith(">") and not clean_lines[i].startswith("> "):
            clean_lines[i] = clean_lines[i].replace(">", "> ", 1)

    return "\n\n".join(clean_lines)

# === –§–£–ù–ö–¶–ò–Ø: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ ===
def format_news(raw_news):
    response = client.chat.completions.create(
        model="mistralai/mistral-7b-instruct",
        messages=[
            {
                "role": "system",
                "content": (
                    "Du bist ein erfahrener Redakteur f√ºr einen deutschen Telegram-Nachrichtenkanal. "
                    "Erstelle Beitr√§ge im g√ºltigen Telegram-Markdown-Stil. "
                    "Verwende ausschlie√ülich folgende Formatierungen:\n"
                    "- *fett* mit `*text*`\n"
                    "- _kursiv_ mit `_text_`\n"
                    "- Zitate mit `> text`\n"
                    "- Keine Hashtags, keine `**` oder `__`, keine Links, keine Emojis.\n\n"
                    "Struktur:\n"
                    "1. *Fette √úberschrift ganz oben*\n"
                    "2. Kurzer Einstiegssatz\n"
                    "3. Ein oder zwei Abs√§tze mit Fakten\n"
                    "4. Optional ein Zitatblock (`> Zitat`)\n\n"
                    "Nutze `\\n\\n` f√ºr Absatztrennung. Der Text soll klar, sachlich und professionell wirken."
                )
            },
            {
                "role": "user",
                "content": f"Formuliere aus dieser Nachricht einen hochwertigen Beitrag:\n\n{raw_news}"
            }
        ],
        temperature=0.7,
        max_tokens=600
    )
    content = response.choices[0].message.content
    return fix_formatting(content)

# === –§–£–ù–ö–¶–ò–Ø: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ===
def send_to_telegram(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    response = requests.post(url, data=payload)
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
    else:
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

# === –§–£–ù–ö–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É ===
def is_similar(title, processed_titles):
    for prev_title in processed_titles:
        similarity = difflib.SequenceMatcher(None, title.lower(), prev_title.lower()).ratio()
        if similarity > 0.75:
            return True
    return False

# === –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ===
fresh_time = datetime.now(timezone.utc) - timedelta(hours=2)
processed_titles = []

for feed_url in rss_feeds:
    print(f"\nüîó –ß–∏—Ç–∞–µ–º –ª–µ–Ω—Ç—É: {feed_url}")
    feed = feedparser.parse(feed_url)

    for entry in feed.entries:
        try:
            published = datetime.fromtimestamp(time.mktime(entry.published_parsed), tz=timezone.utc)
            if published < fresh_time:
                continue

            title = entry.title
            if is_similar(title, processed_titles):
                print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç): {title}")
                continue

            summary = entry.summary if hasattr(entry, "summary") else ""
            raw_text = f"{title}\n{summary}"

            print(f"\nüü° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {title}")
            formatted_post = format_news(raw_text)
            send_to_telegram(formatted_post)
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {title}")
            processed_titles.append(title)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")